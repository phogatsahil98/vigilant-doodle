// ! Merge Sort 
#include <iostream>
#include <vector>
using namespace std;

void mergeArray(vector<int>& arr, int low, int mid, int high) {
    vector<int> temp;
    int left = low;
    int right = mid + 1;

    // Compare and merge
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // Copy remaining left half
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    // Copy remaining right half
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // Copy sorted data back to original array
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

void mergeSort(vector<int>& arr, int low, int high) {
    if (low >= high) return;

    int mid = (low + high) / 2;

    mergeSort(arr, low, mid);      // left half
    mergeSort(arr, mid + 1, high); // right half
    mergeArray(arr, low, mid, high); // merge
}

int main() {
    int count;
    cout << "Enter number of elements: ";
    cin >> count;

    vector<int> arr(count);
    cout << "Enter elements: ";
    for (int i = 0; i < count; i++) {
        cin >> arr[i];
    }

    mergeSort(arr, 0, count - 1);

    cout << "Sorted Array: ";
    for (auto it : arr) {
        cout << it << " ";
    }
    return 0;
}
